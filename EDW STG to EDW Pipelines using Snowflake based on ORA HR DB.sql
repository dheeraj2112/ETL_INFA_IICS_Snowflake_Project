--#################################################################################################
--EDW STG to EDW Pipelines using Snowflake based on ORA HR DB

--#################################################################################################

--STEP 0  ==> Suspend root task to make any changes/additions/modifications and then resume all child tasks first before the parent root task.


/*
--resume all child before parent once created from step-1

ALTER TASK TSK_EDW_STG_EDW_JOB_HISTORY RESUME;
ALTER TASK TSK_EDW_STG_EDW_EMPLOYEES RESUME;
ALTER TASK TSK_EDW_STG_EDW_JOBS RESUME;
ALTER TASK TSK_EDW_STG_EDW_DEPARTMENTS RESUME;
ALTER TASK TSK_EDW_STG_EDW_LOCATIONS RESUME;	
ALTER TASK TSK_EDW_STG_EDW_COUNTRIES RESUME;
ALTER TASK TSK_EDW_STG_EDW_REGION RESUME;
ALTER TASK ROOT_TSK_EDW_ALL RESUME;


SELECT *
  FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY(SCHEDULED_TIME_RANGE_START=>DATEADD('hour',-1,current_timestamp())))
  
  
 ALTER TASK ROOT_TSK_EDW_ALL SUSPEND;
 ALTER TASK TSK_EDW_STG_EDW_REGION SUSPEND;

SHOW TASKS ;

SHOW TASKS LIKE '%EDW%' ;

SELECT *
  FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY(TASK_NAME=>'ROOT_TSK_EDW_ALL')) ;

*/
--STEP1   ===> ROOT TASK
USE EDW.EDW;

--Use SCHEDULE with MIN option 

CREATE OR REPLACE TASK ROOT_TSK_EDW_ALL
WAREHOUSE=COMPUTE_WH
SCHEDULE='10 MINUTE'  	// EVERY 10 MIN
AS
SELECT CURRENT_TIMESTAMP() as CURRENT_TIME;

--Use SCHEDULE with CRON option

CREATE OR REPLACE TASK ROOT_TSK_EDW_ALL
	WAREHOUSE=COMPUTE_WH
	SCHEDULE='USING CRON 0 10 * * MON-FRI Asia/Calcutta'
	AS SELECT CURRENT_TIMESTAMP() AS CURRENT_TIME;

--REGION 

CREATE OR REPLACE TASK TSK_EDW_STG_EDW_REGION
WAREHOUSE=COMPUTE_WH
AFTER ROOT_TSK_EDW_ALL
AS 

MERGE INTO EDW.EDW.REGIONS AS TGT 
USING EDW.EDW_STG.REGIONS AS SRC 
ON TGT.REGION_ID = SRC.REGION_ID

WHEN MATCHED AND TGT.EDW_EFFECTIVE_END_DATE ='9999-12-31 00:00:00.000' AND TGT.REGION_NAME<>SRC.REGION_NAME
THEN UPDATE SET 
 EDW_EFFECTIVE_END_DATE=CURRENT_TIMESTAMP()
,EDW_UPDATE_TIMESTAMP=CURRENT_TIMESTAMP()
,EDW_UPDATED_BY='EDW'
,ACTIVE_FLAG='N'

WHEN NOT MATCHED THEN INSERT
    (
        REGION_ID,
        REGION_NAME,
        MD5_HASH,
        EDW_UPDATED_BY,
        EDW_CREATE_TIMESTAMP,
        EDW_UPDATE_TIMESTAMP,
        EDW_EFFECTIVE_START_DATE,
        EDW_EFFECTIVE_END_DATE,
        ACTIVE_FLAG
    )
VALUES
    (
        SRC.REGION_ID,
        SRC.REGION_NAME,
        SRC.MD5_HASH,
        SRC.EDW_UPDATED_BY,
        SRC.EDW_CREATE_TIMESTAMP,
        SRC.EDW_UPDATE_TIMESTAMP,
        CURRENT_TIMESTAMP(),
        '9999-12-31 00:00:00.000',
        'Y'
    );
	

 --COUNTRIES
 
CREATE OR REPLACE TASK TSK_EDW_STG_EDW_COUNTRIES
WAREHOUSE=COMPUTE_WH
AFTER TSK_EDW_STG_EDW_REGION
AS 

MERGE INTO EDW.EDW.COUNTRIES AS TGT 
USING EDW.EDW_STG.COUNTRIES AS SRC 
ON TGT.COUNTRY_ID = SRC.COUNTRY_ID

WHEN MATCHED AND TGT.EDW_EFFECTIVE_END_DATE ='9999-12-31 00:00:00.000' AND TGT.COUNTRY_NAME<>SRC.COUNTRY_NAME
AND TGT.REGION_ID<>SRC.REGION_ID
THEN UPDATE SET 
 EDW_EFFECTIVE_END_DATE=CURRENT_TIMESTAMP()
,EDW_UPDATE_TIMESTAMP=CURRENT_TIMESTAMP()
,EDW_UPDATED_BY='EDW'
,ACTIVE_FLAG='N'

WHEN NOT MATCHED THEN INSERT
    (
        COUNTRY_ID,
        COUNTRY_NAME,
		REGION_ID,
        MD5_HASH,
        EDW_UPDATED_BY,
        EDW_CREATE_TIMESTAMP,
        EDW_UPDATE_TIMESTAMP,
        EDW_EFFECTIVE_START_DATE,
        EDW_EFFECTIVE_END_DATE,
        ACTIVE_FLAG
    )
VALUES
    (
        SRC.COUNTRY_ID,
        SRC.COUNTRY_NAME,
		SRC.REGION_ID,
        SRC.MD5_HASH,
        SRC.EDW_UPDATED_BY,
        SRC.EDW_CREATE_TIMESTAMP,
        SRC.EDW_UPDATE_TIMESTAMP,
        CURRENT_TIMESTAMP(),
        '9999-12-31 00:00:00.000',
        'Y'
    );
	
	
--LOCATIONS 

CREATE OR REPLACE TASK TSK_EDW_STG_EDW_LOCATIONS
WAREHOUSE=COMPUTE_WH
AFTER TSK_EDW_STG_EDW_COUNTRIES
AS 

MERGE INTO EDW.EDW.LOCATIONS AS TGT 
USING EDW.EDW_STG.LOCATIONS AS SRC 
ON TGT.LOCATION_ID = SRC.LOCATION_ID

WHEN MATCHED AND TGT.EDW_EFFECTIVE_END_DATE ='9999-12-31 00:00:00.000' AND TGT.STREET_ADDRESS<>SRC.STREET_ADDRESS
AND TGT.POSTAL_CODE<>SRC.POSTAL_CODE AND TGT.CITY<>SRC.CITY AND TGT.STATE_PROVINCE<>SRC.STATE_PROVINCE AND TGT.COUNTRY_ID<>SRC.COUNTRY_ID
THEN UPDATE SET 
 EDW_EFFECTIVE_END_DATE=CURRENT_TIMESTAMP()
,EDW_UPDATE_TIMESTAMP=CURRENT_TIMESTAMP()
,EDW_UPDATED_BY='EDW'
,ACTIVE_FLAG='N'

WHEN NOT MATCHED THEN INSERT
    (
        LOCATION_ID,
        STREET_ADDRESS,
		POSTAL_CODE,
		CITY,
		STATE_PROVINCE,
		COUNTRY_ID,
        MD5_HASH,
        EDW_UPDATED_BY,
        EDW_CREATE_TIMESTAMP,
        EDW_UPDATE_TIMESTAMP,
        EDW_EFFECTIVE_START_DATE,
        EDW_EFFECTIVE_END_DATE,
        ACTIVE_FLAG
    )
VALUES
    (
        SRC.LOCATION_ID,
        SRC.STREET_ADDRESS,
		SRC.POSTAL_CODE,
		SRC.CITY,
		SRC.STATE_PROVINCE,
		SRC.COUNTRY_ID,
        SRC.MD5_HASH,
        SRC.EDW_UPDATED_BY,
        SRC.EDW_CREATE_TIMESTAMP,
        SRC.EDW_UPDATE_TIMESTAMP,
        CURRENT_TIMESTAMP(),
        '9999-12-31 00:00:00.000',
        'Y'
    );
	
	
--DEPARTMENTS

CREATE OR REPLACE TASK TSK_EDW_STG_EDW_DEPARTMENTS
WAREHOUSE=COMPUTE_WH
AFTER TSK_EDW_STG_EDW_LOCATIONS
AS 

MERGE INTO EDW.EDW.DEPARTMENTS AS TGT 
USING EDW.EDW_STG.DEPARTMENTS AS SRC 
ON TGT.DEPARTMENT_ID = SRC.DEPARTMENT_ID

WHEN MATCHED AND TGT.EDW_EFFECTIVE_END_DATE ='9999-12-31 00:00:00.000' AND TGT.DEPARTMENT_NAME<>SRC.DEPARTMENT_NAME
AND TGT.MANAGER_ID<>SRC.MANAGER_ID AND TGT.LOCATION_ID<>SRC.LOCATION_ID 
THEN UPDATE SET 
 EDW_EFFECTIVE_END_DATE=CURRENT_TIMESTAMP()
,EDW_UPDATE_TIMESTAMP=CURRENT_TIMESTAMP()
,EDW_UPDATED_BY='EDW'
,ACTIVE_FLAG='N'

WHEN NOT MATCHED THEN INSERT
    (
        DEPARTMENT_ID,
        DEPARTMENT_NAME,
		MANAGER_ID,
		LOCATION_ID,
        MD5_HASH,
        EDW_UPDATED_BY,
        EDW_CREATE_TIMESTAMP,
        EDW_UPDATE_TIMESTAMP,
        EDW_EFFECTIVE_START_DATE,
        EDW_EFFECTIVE_END_DATE,
        ACTIVE_FLAG
    )
VALUES
    (
        SRC.DEPARTMENT_ID,
        SRC.DEPARTMENT_NAME,
		SRC.MANAGER_ID,
		SRC.LOCATION_ID,
        SRC.MD5_HASH,
        SRC.EDW_UPDATED_BY,
        SRC.EDW_CREATE_TIMESTAMP,
        SRC.EDW_UPDATE_TIMESTAMP,
        CURRENT_TIMESTAMP(),
        '9999-12-31 00:00:00.000',
        'Y'
    );
	
	
--JOBS 

CREATE OR REPLACE TASK TSK_EDW_STG_EDW_JOBS
WAREHOUSE=COMPUTE_WH
AFTER TSK_EDW_STG_EDW_DEPARTMENTS
AS 

MERGE INTO EDW.EDW.JOBS AS TGT 
USING EDW.EDW_STG.JOBS AS SRC 
ON TGT.JOB_ID = SRC.JOB_ID

WHEN MATCHED AND TGT.EDW_EFFECTIVE_END_DATE ='9999-12-31 00:00:00.000' AND TGT.JOB_TITLE<>SRC.JOB_TITLE
AND TGT.MIN_SALARY<>SRC.MIN_SALARY AND TGT.MAX_SALARY<>SRC.MAX_SALARY 
THEN UPDATE SET 
 EDW_EFFECTIVE_END_DATE=CURRENT_TIMESTAMP()
,EDW_UPDATE_TIMESTAMP=CURRENT_TIMESTAMP()
,EDW_UPDATED_BY='EDW'
,ACTIVE_FLAG='N'

WHEN NOT MATCHED THEN INSERT
    (
        JOB_ID,
        JOB_TITLE,
		MIN_SALARY,
		MAX_SALARY,
        MD5_HASH,
        EDW_UPDATED_BY,
        EDW_CREATE_TIMESTAMP,
        EDW_UPDATE_TIMESTAMP,
        EDW_EFFECTIVE_START_DATE,
        EDW_EFFECTIVE_END_DATE,
        ACTIVE_FLAG
    )
VALUES
    (
        SRC.JOB_ID,
        SRC.JOB_TITLE,
		SRC.MIN_SALARY,
		SRC.MAX_SALARY,
        SRC.MD5_HASH,
        SRC.EDW_UPDATED_BY,
        SRC.EDW_CREATE_TIMESTAMP,
        SRC.EDW_UPDATE_TIMESTAMP,
        CURRENT_TIMESTAMP(),
        '9999-12-31 00:00:00.000',
        'Y'
    );
	
--EMPLOYEES

CREATE OR REPLACE TASK TSK_EDW_STG_EDW_EMPLOYEES
WAREHOUSE=COMPUTE_WH
AFTER TSK_EDW_STG_EDW_JOBS
AS 

MERGE INTO EDW.EDW.EMPLOYEES AS TGT 
USING EDW.EDW_STG.EMPLOYEES AS SRC 
ON TGT.EMPLOYEE_ID = SRC.EMPLOYEE_ID

WHEN MATCHED AND TGT.EDW_EFFECTIVE_END_DATE ='9999-12-31 00:00:00.000' AND TGT.FIRST_NAME<>SRC.FIRST_NAME
AND TGT.LAST_NAME<>SRC.LAST_NAME AND TGT.EMAIL<>SRC.EMAIL AND TGT.PHONE_NUMBER<>SRC.PHONE_NUMBER  AND TGT.HIRE_DATE<>SRC.HIRE_DATE  AND TGT.JOB_ID<>SRC.JOB_ID 
AND  TGT.SALARY<>SRC.SALARY AND TGT.COMMISSION_PCT<>SRC.COMMISSION_PCT AND TGT.MANAGER_ID<>SRC.MANAGER_ID AND TGT.DEPARTMENT_ID<>SRC.DEPARTMENT_ID
THEN UPDATE SET 
 EDW_EFFECTIVE_END_DATE=CURRENT_TIMESTAMP()
,EDW_UPDATE_TIMESTAMP=CURRENT_TIMESTAMP()
,EDW_UPDATED_BY='EDW'
,ACTIVE_FLAG='N'

WHEN NOT MATCHED THEN INSERT
    (
        EMPLOYEE_ID,
        FIRST_NAME,
		LAST_NAME,
		EMAIL,
		PHONE_NUMBER,
		HIRE_DATE,
        JOB_ID,
        SALARY,
        COMMISSION_PCT,
        MANAGER_ID,
        DEPARTMENT_ID,
        MD5_HASH,
        EDW_UPDATED_BY,
        EDW_CREATE_TIMESTAMP,
        EDW_UPDATE_TIMESTAMP,
        EDW_EFFECTIVE_START_DATE,
        EDW_EFFECTIVE_END_DATE,
        ACTIVE_FLAG
    )
VALUES
    (
        SRC.EMPLOYEE_ID,
        SRC.FIRST_NAME,
		SRC.LAST_NAME,
		SRC.EMAIL,
		SRC.PHONE_NUMBER,
		SRC.HIRE_DATE,
        SRC.JOB_ID,
        SRC.SALARY,
        SRC.COMMISSION_PCT,
        SRC.MANAGER_ID,
        SRC.DEPARTMENT_ID,
        SRC.MD5_HASH,
        SRC.EDW_UPDATED_BY,
        SRC.EDW_CREATE_TIMESTAMP,
        SRC.EDW_UPDATE_TIMESTAMP,
        CURRENT_TIMESTAMP(),
        '9999-12-31 00:00:00.000',
        'Y'
    );
	

--JOB_HISTORY

CREATE OR REPLACE TASK TSK_EDW_STG_EDW_JOB_HISTORY
WAREHOUSE=COMPUTE_WH
AFTER TSK_EDW_STG_EDW_EMPLOYEES
AS 

MERGE INTO EDW.EDW.JOB_HISTORY AS TGT 
USING EDW.EDW_STG.JOB_HISTORY AS SRC 
ON TGT.EMPLOYEE_ID = SRC.EMPLOYEE_ID AND TGT.START_DATE = SRC.START_DATE 

WHEN MATCHED AND TGT.EDW_EFFECTIVE_END_DATE ='9999-12-31 00:00:00.000' AND TGT.START_DATE<>SRC.START_DATE
AND TGT.END_DATE<>SRC.END_DATE AND TGT.JOB_ID<>SRC.JOB_ID AND TGT.DEPARTMENT_ID<>SRC.DEPARTMENT_ID
THEN UPDATE SET 
 EDW_EFFECTIVE_END_DATE=CURRENT_TIMESTAMP()
,EDW_UPDATE_TIMESTAMP=CURRENT_TIMESTAMP()
,EDW_UPDATED_BY='EDW'
,ACTIVE_FLAG='N'

WHEN NOT MATCHED THEN INSERT
    (
        EMPLOYEE_ID,
        START_DATE,
		END_DATE,
		JOB_ID,
		DEPARTMENT_ID,
        MD5_HASH,
        EDW_UPDATED_BY,
        EDW_CREATE_TIMESTAMP,
        EDW_UPDATE_TIMESTAMP,
        EDW_EFFECTIVE_START_DATE,
        EDW_EFFECTIVE_END_DATE,
        ACTIVE_FLAG
    )
VALUES
    (
        SRC.EMPLOYEE_ID,
        SRC.START_DATE,
		SRC.END_DATE,
		SRC.JOB_ID,
		SRC.DEPARTMENT_ID,
        SRC.MD5_HASH,
        SRC.EDW_UPDATED_BY,
        SRC.EDW_CREATE_TIMESTAMP,
        SRC.EDW_UPDATE_TIMESTAMP,
        CURRENT_TIMESTAMP(),
        '9999-12-31 00:00:00.000',
        'Y'
    )
;


--Dynamic Table Example to get the employee details updated for repoting need.

CREATE OR REPLACE DYNAMIC TABLE EMPLOYEE_DETAILS(
	EMPLOYEE_ID,
	JOB_ID,
	MANAGER_ID,
	DEPARTMENT_ID,
	LOCATION_ID,
	COUNTRY_ID,
	FIRST_NAME,
	LAST_NAME,
	SALARY,
	COMMISSION_PCT,
	DEPARTMENT_NAME,
	JOB_TITLE,
	CITY,
	STATE_PROVINCE,
	COUNTRY_NAME,
	REGION_NAME
) 

LAG = '10 MINUTES' 
REFRESH_MODE = AUTO 
INITIALIZE = ON_CREATE 
WAREHOUSE = COMPUTE_WH
 AS 

 SELECT  
  E.EMPLOYEE_ID,   
  E.JOB_ID,   
  E.MANAGER_ID,   
  E.DEPARTMENT_ID,  
  D.LOCATION_ID,  
  L.COUNTRY_ID,  
  E.FIRST_NAME,  
  E.LAST_NAME,  
  E.SALARY,  
  E.COMMISSION_PCT,  
  D.DEPARTMENT_NAME,  
  J.JOB_TITLE,  
  L.CITY,  
  L.STATE_PROVINCE,  
  C.COUNTRY_NAME,  
  R.REGION_NAME  
FROM  
  EDW.EMPLOYEES E,  
  EDW.DEPARTMENTS D,  
  EDW.JOBS J,  
  EDW.LOCATIONS L,  
  EDW.COUNTRIES C,  
  EDW.REGIONS R  
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID  
  AND D.LOCATION_ID = L.LOCATION_ID  
  AND L.COUNTRY_ID = C.COUNTRY_ID  
  AND C.REGION_ID = R.REGION_ID  
  AND J.JOB_ID = E.JOB_ID
  ORDER BY E.EMPLOYEE_ID
  ;
  
 --Snowpipe example with DEMO
 --Create an Internal stag with file format
 
 CREATE OR REPLACE STAGE ORDER_DATA  FILE_FORMAT = (TYPE = CSV);

--Copy Order Data into stage

COPY INTO @ORDER_DATA 
FROM
    (SELECT *
        FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF10.ORDERS LIMIT 150000) 
        INCLUDE_QUERY_ID=TRUE;


//Validate
//Expected error from the next SQL statement
//SELECT * FROM @ORDER_DATA;

//Validate
SELECT METADATA$FILENAME,$1 FROM @ORDER_DATA;

SELECT DISTINCT METADATA$FILENAME FROM @ORDER_DATA; 

//Validate
LIST @ORDER_DATA;


--Creating table to hold the order data 

CREATE OR REPLACE TABLE STG_ORDER
    (O_ORDERKEY         NUMBER,
     O_CUSTKEY          NUMBER,
     O_ORDERSTATUS      STRING,
     O_TOTALPRICE       NUMBER,
     O_ORDERDATE        DATE,
     O_ORDERPRIORITY    STRING,
     O_CLERK            STRING,
     O_SHIPPRIORITY     NUMBER,
     O_COMMENT          STRING,
     FILENAME           STRING NOT NULL,
     FILE_ROW_SEQ       NUMBER NOT NULL,
     LDTS               STRING NOT NULL,
     RSCR               STRING NOT NULL);


--Create the PIPE for copying data from STG to the required Table
-- With AUTO_INGEST=FALSE hence we need to manually refresh in order to load data or that can be run through a task in regular INTERVAL


CREATE OR REPLACE  PIPE STG_ORDER_PP 
AS 
COPY INTO STG_ORDER 
    FROM
        (SELECT $1,$2,$3,$4,$5,$6,$7,$8,$9,
         METADATA$FILENAME, METADATA$FILE_ROW_NUMBER,
         CURRENT_TIMESTAMP(), 'ORDER SYSTEM'
         FROM @ORDER_DATA);

--Select/Check the table data 

SELECT * FROM STG_ORDER

--Validate - no data

SELECT * FROM STG_ORDER;
--TRUNCATE TABLE STG_ORDER

--Select the data from the stage 

SELECT METADATA$FILENAME,$1 FROM @ORDER_DATA;

--Task to refresh the PIPE in regular interval as per need.

CREATE OR REPLACE TASK TSK_STG_ORDERS_LOAD
WAREHOUSE=COMPUTE_WH
SCHEDULE='10 MINUTE'
AS 
ALTER PIPE STG_ORDER_PP REFRESH;

--Show tasks to view task details 

SHOW TASKS 

--Resume the task 
ALTER TASK TSK_STG_ORDERS_LOAD RESUME;

--Task history for the said task 
SELECT *
  FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY(TASK_NAME=>'TSK_STG_ORDERS_LOAD')) ;

  --Task history order by SCHEDULED_TIME DESC
SELECT *
  FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY()) 
  ORDER BY SCHEDULED_TIME DESC ;